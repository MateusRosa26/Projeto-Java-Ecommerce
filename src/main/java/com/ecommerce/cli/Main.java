package com.ecommerce.cli;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Scanner;
import java.util.concurrent.CompletableFuture;

public class Main {
    private static final String API_BASE_URL = "http://localhost:8080/api";
    private static final HttpClient httpClient = HttpClient.newHttpClient();
    private static final Scanner scanner = new Scanner(System.in);
    
    // Estado da sess√£o
    private static String currentUserToken = null;
    private static String currentUserEmail = null;
    private static String currentUserRole = null; // "CLIENTE", "GERENTE", "ENTREGADOR"

    public static void main(String[] args) {
        System.out.println("üõí === SISTEMA E-COMMERCE === üõí");
        System.out.println("Bem-vindo ao sistema de gerenciamento de pedidos!");
        
        // Verificar se a API est√° rodando
        if (!checkApiHealth()) {
            System.out.println("\n‚ùå ERRO: API REST n√£o est√° rodando!");
            System.out.println("üí° Para usar a CLI, voc√™ precisa:");
            System.out.println("   1. Abrir o IntelliJ IDEA");
            System.out.println("   2. Executar a classe EcommerceApplication");
            System.out.println("   3. Aguardar a mensagem 'Started EcommerceApplication'");
            System.out.println("   4. Executar a CLI novamente");
            System.out.println("\nüåê URL esperada: http://localhost:8080");
            System.out.println("\nPressione ENTER para sair...");
            scanner.nextLine();
            System.exit(1);
        }
        
        System.out.println("‚úÖ API REST conectada com sucesso!");
        
        while (true) {
            if (currentUserToken == null) {
                showLoginMenu();
            } else {
                showMainMenu();
            }
        }
    }
    
    private static boolean checkApiHealth() {
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/health"))
                .GET()
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            return response.statusCode() == 200;
        } catch (Exception e) {
            return false;
        }
    }

    private static void showLoginMenu() {
        System.out.println("\n=== MENU DE ACESSO ===");
        System.out.println("1. Login");
        System.out.println("2. Cadastro");
        System.out.println("3. Sair");
        System.out.print("Escolha uma op√ß√£o: ");
        
        String choice = scanner.nextLine();
        
        switch (choice) {
            case "1" -> login();
            case "2" -> register();
            case "3" -> {
                System.out.println("Obrigado por usar o sistema! üëã");
                System.exit(0);
            }
            default -> System.out.println("‚ùå Op√ß√£o inv√°lida!");
        }
    }

    private static void showMainMenu() {
        System.out.println("\n=== MENU PRINCIPAL ===");
        System.out.println("üë§ Usu√°rio: " + currentUserEmail + " (" + currentUserRole + ")");
        System.out.println();
        
        if ("CLIENTE".equals(currentUserRole)) {
            showClienteMenu();
        } else if ("GERENTE".equals(currentUserRole)) {
            showGerenteMenu();
        } else if ("ENTREGADOR".equals(currentUserRole)) {
            showEntregadorMenu();
        }
    }

    private static void showClienteMenu() {
        System.out.println("1. üì¶ Ver produtos dispon√≠veis");
        System.out.println("2. üõí Adicionar produto ao carrinho");
        System.out.println("3. üõçÔ∏è Ver carrinho");
        System.out.println("4. üìã Fazer pedido");
        System.out.println("5. üìä Acompanhar meus pedidos");
        System.out.println("6. ‚≠ê Avaliar pedido entregue");
        System.out.println("7. üè† Gerenciar endere√ßos");
        System.out.println("8. üö™ Logout");
        System.out.print("Escolha uma op√ß√£o: ");
        
        String choice = scanner.nextLine();
        
        switch (choice) {
            case "1" -> listProducts();
            case "2" -> addToCart();
            case "3" -> viewCart();
            case "4" -> createOrder();
            case "5" -> trackOrders();
            case "6" -> evaluateOrder();
            case "7" -> manageAddresses();
            case "8" -> logout();
            default -> System.out.println("‚ùå Op√ß√£o inv√°lida!");
        }
    }

    private static void showGerenteMenu() {
        System.out.println("1. üì¶ Gerenciar produtos");
        System.out.println("2. üìã Ver todos os pedidos");
        System.out.println("3. üöö Alterar status do pedido");
        System.out.println("4. ‚ùå Cancelar pedido");
        System.out.println("5. üìä Gerar relat√≥rio de vendas");
        System.out.println("6. üö™ Logout");
        System.out.print("Escolha uma op√ß√£o: ");
        
        String choice = scanner.nextLine();
        
        switch (choice) {
            case "1" -> manageProducts();
            case "2" -> listAllOrders();
            case "3" -> updateOrderStatus();
            case "4" -> cancelOrder();
            case "5" -> generateReport();
            case "6" -> logout();
            default -> System.out.println("‚ùå Op√ß√£o inv√°lida!");
        }
    }

    private static void showEntregadorMenu() {
        System.out.println("1. üìã Ver pedidos para entrega");
        System.out.println("2. üöö Marcar pedido como entregue");
        System.out.println("3. ‚≠ê Ver minhas avalia√ß√µes");
        System.out.println("4. üö™ Logout");
        System.out.print("Escolha uma op√ß√£o: ");
        
        String choice = scanner.nextLine();
        
        switch (choice) {
            case "1" -> viewDeliveryOrders();
            case "2" -> markOrderAsDelivered();
            case "3" -> viewMyRatings();
            case "4" -> logout();
            default -> System.out.println("‚ùå Op√ß√£o inv√°lida!");
        }
    }

    // === M√âTODOS DE AUTENTICA√á√ÉO ===
    
    private static void login() {
        System.out.print("üìß Email: ");
        String email = scanner.nextLine();
        System.out.print("üîí Senha: ");
        String password = scanner.nextLine();
        
        String jsonBody = String.format("""
            {
                "username": "%s",
                "email": "%s"
            }
            """, email, password);
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/users/login"))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(jsonBody))
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                // Simular resposta de login bem-sucedida
                currentUserToken = "token-" + System.currentTimeMillis();
                currentUserEmail = email;
                currentUserRole = "CLIENTE"; // Por padr√£o, mas deveria vir da resposta
                System.out.println("‚úÖ Login realizado com sucesso!");
            } else {
                System.out.println("‚ùå Falha no login: " + response.body());
            }
        } catch (Exception e) {
            if (e.getMessage() == null || e.getMessage().contains("Connection refused") || e.getMessage().contains("Imposs√≠vel conectar")) {
                System.out.println("‚ùå ERRO: API REST n√£o est√° rodando!");
                System.out.println("üí° Certifique-se de que a API est√° rodando no IntelliJ (EcommerceApplication)");
                System.out.println("üåê URL esperada: http://localhost:8080");
            } else {
                System.out.println("‚ùå Erro ao fazer login: " + e.getMessage());
            }
        }
    }

    private static void register() {
        System.out.print("üìß Email: ");
        String email = scanner.nextLine();
        System.out.print("üîí Senha: ");
        String password = scanner.nextLine();
        System.out.print("üë§ Nome: ");
        String name = scanner.nextLine();
        System.out.print("üì± Telefone: ");
        String phone = scanner.nextLine();
        
        String jsonBody = String.format("""
            {
                "username": "%s",
                "nome": "%s",
                "email": "%s"
            }
            """, email, name, email);
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/users/register"))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(jsonBody))
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 201) {
                System.out.println("‚úÖ Cadastro realizado com sucesso! Fa√ßa login para continuar.");
            } else {
                System.out.println("‚ùå Falha no cadastro: " + response.body());
            }
        } catch (Exception e) {
            if (e.getMessage() == null || e.getMessage().contains("Connection refused") || e.getMessage().contains("Imposs√≠vel conectar")) {
                System.out.println("‚ùå ERRO: API REST n√£o est√° rodando!");
                System.out.println("üí° Certifique-se de que a API est√° rodando no IntelliJ (EcommerceApplication)");
                System.out.println("üåê URL esperada: http://localhost:8080");
            } else {
                System.out.println("‚ùå Erro ao fazer cadastro: " + e.getMessage());
            }
        }
    }

    private static void logout() {
        currentUserToken = null;
        currentUserEmail = null;
        currentUserRole = null;
        System.out.println("üëã Logout realizado com sucesso!");
    }

    // === M√âTODOS DO CLIENTE ===
    
    private static void listProducts() {
        System.out.println("\nüì¶ === PRODUTOS DISPON√çVEIS ===");
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/products"))
                .GET()
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println(response.body());
            } else {
                System.out.println("‚ùå Erro ao buscar produtos: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao buscar produtos: " + e.getMessage());
        }
    }

    private static void addToCart() {
        System.out.print("üì¶ C√≥digo do produto: ");
        String productCode = scanner.nextLine();
        System.out.print("üî¢ Quantidade: ");
        String quantity = scanner.nextLine();
        
        String jsonBody = String.format("""
            {
                "productCode": "%s",
                "quantity": %s
            }
            """, productCode, quantity);
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/products/addToCart"))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(jsonBody))
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println("‚úÖ Produto adicionado ao carrinho!");
            } else {
                System.out.println("‚ùå Erro ao adicionar ao carrinho: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao adicionar ao carrinho: " + e.getMessage());
        }
    }

    private static void viewCart() {
        System.out.println("\nüõí === MEU CARRINHO ===");
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/orders/cart"))
                .header("Authorization", "Bearer " + currentUserToken)
                .GET()
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println(response.body());
            } else {
                System.out.println("‚ùå Erro ao buscar carrinho: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao buscar carrinho: " + e.getMessage());
        }
    }

    private static void createOrder() {
        System.out.println("\nüìã === FAZER PEDIDO ===");
        
        // Primeiro, mostrar endere√ßos dispon√≠veis
        System.out.println("Seus endere√ßos:");
        System.out.println("1. Rua das Flores, 123 - Centro, S√£o Paulo/SP");
        System.out.println("2. Av. Paulista, 1000 - Bela Vista, S√£o Paulo/SP");
        
        System.out.print("üè† ID do endere√ßo de entrega: ");
        String addressId = scanner.nextLine();
        
        System.out.println("üí≥ M√©todos de pagamento dispon√≠veis:");
        System.out.println("1. Cart√£o de cr√©dito");
        System.out.println("2. Cart√£o de d√©bito");
        System.out.println("3. PIX");
        System.out.println("4. Boleto");
        System.out.println("5. Dinheiro");
        System.out.print("Escolha o m√©todo de pagamento: ");
        String paymentMethod = scanner.nextLine();
        
        String jsonBody = String.format("""
            {
                "addressId": %s,
                "paymentMethod": "%s"
            }
            """, addressId, paymentMethod);
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/orders/finishOrder"))
                .header("Content-Type", "application/json")
                .header("Authorization", "Bearer " + currentUserToken)
                .POST(HttpRequest.BodyPublishers.ofString(jsonBody))
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 201) {
                System.out.println("‚úÖ Pedido criado com sucesso!");
                System.out.println("üìß Voc√™ receber√° notifica√ß√µes sobre o status do pedido.");
            } else {
                System.out.println("‚ùå Erro ao criar pedido: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao criar pedido: " + e.getMessage());
        }
    }

    private static void trackOrders() {
        System.out.println("\nüìä === MEUS PEDIDOS ===");
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/orders"))
                .header("Authorization", "Bearer " + currentUserToken)
                .GET()
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println(response.body());
            } else {
                System.out.println("‚ùå Erro ao buscar pedidos: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao buscar pedidos: " + e.getMessage());
        }
    }

    private static void evaluateOrder() {
        System.out.print("üìã ID do pedido para avaliar: ");
        String orderId = scanner.nextLine();
        
        System.out.print("‚≠ê Nota para o entregador (1-5): ");
        String deliveryRating = scanner.nextLine();
        System.out.print("üí¨ Coment√°rio sobre a entrega: ");
        String deliveryComment = scanner.nextLine();
        
        System.out.print("‚≠ê Nota para os produtos (1-5): ");
        String productRating = scanner.nextLine();
        System.out.print("üí¨ Coment√°rio sobre os produtos: ");
        String productComment = scanner.nextLine();
        
        String jsonBody = String.format("""
            {
                "deliveryRating": %s,
                "deliveryComment": "%s",
                "productRating": %s,
                "productComment": "%s"
            }
            """, deliveryRating, deliveryComment, productRating, productComment);
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/orders/" + orderId + "/evaluate"))
                .header("Content-Type", "application/json")
                .header("Authorization", "Bearer " + currentUserToken)
                .POST(HttpRequest.BodyPublishers.ofString(jsonBody))
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println("‚úÖ Avalia√ß√£o enviada com sucesso!");
            } else {
                System.out.println("‚ùå Erro ao enviar avalia√ß√£o: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao enviar avalia√ß√£o: " + e.getMessage());
        }
    }

    private static void manageAddresses() {
        System.out.println("\nüè† === GERENCIAR ENDERE√áOS ===");
        System.out.println("1. Ver meus endere√ßos");
        System.out.println("2. Adicionar novo endere√ßo");
        System.out.println("3. Voltar");
        System.out.print("Escolha uma op√ß√£o: ");
        
        String choice = scanner.nextLine();
        
        switch (choice) {
            case "1" -> listAddresses();
            case "2" -> addAddress();
            case "3" -> { /* Voltar */ }
            default -> System.out.println("‚ùå Op√ß√£o inv√°lida!");
        }
    }

    private static void listAddresses() {
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/addresses/user/" + currentUserEmail))
                .header("Authorization", "Bearer " + currentUserToken)
                .GET()
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println(response.body());
            } else {
                System.out.println("‚ùå Erro ao buscar endere√ßos: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao buscar endere√ßos: " + e.getMessage());
        }
    }

    private static void addAddress() {
        System.out.print("üè† Rua: ");
        String street = scanner.nextLine();
        System.out.print("üî¢ N√∫mero: ");
        String number = scanner.nextLine();
        System.out.print("üèòÔ∏è Bairro: ");
        String neighborhood = scanner.nextLine();
        System.out.print("üèôÔ∏è Cidade: ");
        String city = scanner.nextLine();
        System.out.print("üåç Estado: ");
        String state = scanner.nextLine();
        System.out.print("üìÆ CEP: ");
        String zipCode = scanner.nextLine();
        System.out.print("üìù Complemento (opcional): ");
        String complement = scanner.nextLine();
        
        String jsonBody = String.format("""
            {
                "street": "%s",
                "number": "%s",
                "neighborhood": "%s",
                "city": "%s",
                "state": "%s",
                "zipCode": "%s",
                "complement": "%s"
            }
            """, street, number, neighborhood, city, state, zipCode, complement);
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/addresses"))
                .header("Content-Type", "application/json")
                .header("Authorization", "Bearer " + currentUserToken)
                .POST(HttpRequest.BodyPublishers.ofString(jsonBody))
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 201) {
                System.out.println("‚úÖ Endere√ßo adicionado com sucesso!");
            } else {
                System.out.println("‚ùå Erro ao adicionar endere√ßo: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao adicionar endere√ßo: " + e.getMessage());
        }
    }

    // === M√âTODOS DO GERENTE ===
    
    private static void manageProducts() {
        System.out.println("\nüì¶ === GERENCIAR PRODUTOS ===");
        System.out.println("1. Ver todos os produtos");
        System.out.println("2. Adicionar produto");
        System.out.println("3. Editar produto");
        System.out.println("4. Remover produto");
        System.out.println("5. Voltar");
        System.out.print("Escolha uma op√ß√£o: ");
        
        String choice = scanner.nextLine();
        
        switch (choice) {
            case "1" -> listProducts();
            case "2" -> addProduct();
            case "3" -> editProduct();
            case "4" -> removeProduct();
            case "5" -> { /* Voltar */ }
            default -> System.out.println("‚ùå Op√ß√£o inv√°lida!");
        }
    }

    private static void addProduct() {
        System.out.print("üì¶ Nome do produto: ");
        String name = scanner.nextLine();
        System.out.print("üí∞ Pre√ßo: ");
        String price = scanner.nextLine();
        System.out.print("üìù Descri√ß√£o: ");
        String description = scanner.nextLine();
        System.out.print("üè∑Ô∏è C√≥digo de barras: ");
        String barcode = scanner.nextLine();
        System.out.print("üñºÔ∏è URL da imagem: ");
        String imageUrl = scanner.nextLine();
        
        String jsonBody = String.format("""
            {
                "name": "%s",
                "price": %s,
                "description": "%s",
                "barcode": "%s",
                "imageUrl": "%s"
            }
            """, name, price, description, barcode, imageUrl);
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/products"))
                .header("Content-Type", "application/json")
                .header("Authorization", "Bearer " + currentUserToken)
                .POST(HttpRequest.BodyPublishers.ofString(jsonBody))
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 201) {
                System.out.println("‚úÖ Produto adicionado com sucesso!");
            } else {
                System.out.println("‚ùå Erro ao adicionar produto: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao adicionar produto: " + e.getMessage());
        }
    }

    private static void editProduct() {
        System.out.print("üì¶ ID do produto para editar: ");
        String productId = scanner.nextLine();
        
        System.out.print("üì¶ Novo nome (deixe vazio para manter): ");
        String name = scanner.nextLine();
        System.out.print("üí∞ Novo pre√ßo (deixe vazio para manter): ");
        String price = scanner.nextLine();
        System.out.print("üìù Nova descri√ß√£o (deixe vazio para manter): ");
        String description = scanner.nextLine();
        
        String jsonBody = String.format("""
            {
                "name": "%s",
                "price": %s,
                "description": "%s"
            }
            """, name.isEmpty() ? "null" : name, 
                 price.isEmpty() ? "null" : price, 
                 description.isEmpty() ? "null" : description);
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/products/" + productId))
                .header("Content-Type", "application/json")
                .header("Authorization", "Bearer " + currentUserToken)
                .PUT(HttpRequest.BodyPublishers.ofString(jsonBody))
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println("‚úÖ Produto atualizado com sucesso!");
            } else {
                System.out.println("‚ùå Erro ao atualizar produto: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao atualizar produto: " + e.getMessage());
        }
    }

    private static void removeProduct() {
        System.out.print("üì¶ ID do produto para remover: ");
        String productId = scanner.nextLine();
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/products/" + productId))
                .header("Authorization", "Bearer " + currentUserToken)
                .DELETE()
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println("‚úÖ Produto removido com sucesso!");
            } else {
                System.out.println("‚ùå Erro ao remover produto: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao remover produto: " + e.getMessage());
        }
    }

    private static void listAllOrders() {
        System.out.println("\nüìã === TODOS OS PEDIDOS ===");
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/orders"))
                .header("Authorization", "Bearer " + currentUserToken)
                .GET()
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println(response.body());
            } else {
                System.out.println("‚ùå Erro ao buscar pedidos: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao buscar pedidos: " + e.getMessage());
        }
    }

    private static void updateOrderStatus() {
        System.out.print("üìã ID do pedido: ");
        String orderId = scanner.nextLine();
        
        System.out.println("üîÑ Status dispon√≠veis:");
        System.out.println("1. Preparando");
        System.out.println("2. Saindo para entrega");
        System.out.println("3. Entregue");
        System.out.println("4. Cancelado");
        System.out.print("Escolha o novo status: ");
        String status = scanner.nextLine();
        
        String statusValue = switch (status) {
            case "1" -> "PREPARANDO";
            case "2" -> "SAINDO_PARA_ENTREGA";
            case "3" -> "ENTREGUE";
            case "4" -> "CANCELADO";
            default -> "PREPARANDO";
        };
        
        String jsonBody = String.format("""
            {
                "status": "%s"
            }
            """, statusValue);
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/orders/" + orderId + "/status"))
                .header("Content-Type", "application/json")
                .header("Authorization", "Bearer " + currentUserToken)
                .PUT(HttpRequest.BodyPublishers.ofString(jsonBody))
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println("‚úÖ Status do pedido atualizado com sucesso!");
            } else {
                System.out.println("‚ùå Erro ao atualizar status: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao atualizar status: " + e.getMessage());
        }
    }

    private static void cancelOrder() {
        System.out.print("üìã ID do pedido para cancelar: ");
        String orderId = scanner.nextLine();
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/orders/" + orderId))
                .header("Authorization", "Bearer " + currentUserToken)
                .DELETE()
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println("‚úÖ Pedido cancelado com sucesso!");
            } else {
                System.out.println("‚ùå Erro ao cancelar pedido: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao cancelar pedido: " + e.getMessage());
        }
    }

    private static void generateReport() {
        System.out.println("\nüìä === GERAR RELAT√ìRIO DE VENDAS ===");
        System.out.print("üìÖ Data de in√≠cio (YYYY-MM-DD): ");
        String startDate = scanner.nextLine();
        System.out.print("üìÖ Data de fim (YYYY-MM-DD): ");
        String endDate = scanner.nextLine();
        System.out.print("üè∑Ô∏è C√≥digo de barras do produto (opcional): ");
        String productBarcode = scanner.nextLine();
        
        String jsonBody = String.format("""
            {
                "startDate": "%s",
                "endDate": "%s",
                "productBarcode": "%s"
            }
            """, startDate, endDate, productBarcode.isEmpty() ? "" : productBarcode);
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/reports/generate"))
                .header("Content-Type", "application/json")
                .header("Authorization", "Bearer " + currentUserToken)
                .POST(HttpRequest.BodyPublishers.ofString(jsonBody))
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println("üìä === RELAT√ìRIO DE VENDAS ===");
                System.out.println(response.body());
            } else {
                System.out.println("‚ùå Erro ao gerar relat√≥rio: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao gerar relat√≥rio: " + e.getMessage());
        }
    }

    // === M√âTODOS DO ENTREGADOR ===
    
    private static void viewDeliveryOrders() {
        System.out.println("\nüìã === PEDIDOS PARA ENTREGA ===");
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/orders?status=SAINDO_PARA_ENTREGA"))
                .header("Authorization", "Bearer " + currentUserToken)
                .GET()
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println(response.body());
            } else {
                System.out.println("‚ùå Erro ao buscar pedidos: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao buscar pedidos: " + e.getMessage());
        }
    }

    private static void markOrderAsDelivered() {
        System.out.print("üìã ID do pedido entregue: ");
        String orderId = scanner.nextLine();
        
        String jsonBody = """
            {
                "status": "ENTREGUE"
            }
            """;
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/orders/" + orderId + "/status"))
                .header("Content-Type", "application/json")
                .header("Authorization", "Bearer " + currentUserToken)
                .PUT(HttpRequest.BodyPublishers.ofString(jsonBody))
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println("‚úÖ Pedido marcado como entregue com sucesso!");
            } else {
                System.out.println("‚ùå Erro ao marcar como entregue: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao marcar como entregue: " + e.getMessage());
        }
    }

    private static void viewMyRatings() {
        System.out.println("\n‚≠ê === MINHAS AVALIA√á√ïES ===");
        
        try {
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_BASE_URL + "/orders/delivery-ratings"))
                .header("Authorization", "Bearer " + currentUserToken)
                .GET()
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                System.out.println(response.body());
            } else {
                System.out.println("‚ùå Erro ao buscar avalia√ß√µes: " + response.body());
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao buscar avalia√ß√µes: " + e.getMessage());
        }
    }
}
